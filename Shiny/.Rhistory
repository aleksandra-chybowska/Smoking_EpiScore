only_assign_vars$assign = outlierTrim(only_assign_vars$assign, 3)
only_assign_vars2 = na.omit(only_assign_vars) #12657
summary(only_assign_vars)
####################################### By wave #######################################
only_assign_vars = cox[c("id", "Sentrix_ID", "sex", "age", "simd", "history_cvd", "diabetic",
"cigs_day_raw", "non_smoker", "sys_bp", "ra", "total_cholesterol","HDL_cholesterol",
"assign", "set", "event", "tte", "Troponin_I", "cTnI_corrected")]
only_assign_vars = only_assign_vars[c("id", "Sentrix_ID", "sex", "age", "assign", "set", "cTnI_corrected", "event", "tte")]
only_assign_vars = subset(only_assign_vars, !is.na(tte) & tte>0) #18359
only_assign_vars = subset(only_assign_vars, !is.na(assign)) # 16354
only_assign_vars = subset(only_assign_vars, only_assign_vars$age>=30 & only_assign_vars$age<70) # 12971 items
only_assign_vars$assign = outlierTrim(only_assign_vars$assign, 3)
only_assign_vars2 = na.omit(only_assign_vars) #12657
View(only_assign_vars2)
only_assign_vars = only_assign_vars[c("id", "Sentrix_ID", "sex", "age", "assign", "set", "cTnI_corrected", "event", "tte")]
View(cox)
View(only_assign_vars)
library(dplyr)
library(optparse)
library(jsonlite)
#box::use(../../modules/cox[...])
make_cox_dataset = function(ds) {
ds[which(is.na(ds$mob)), "mob"] = 1
# there is another file - targets file - where this has been corrected
ds$dead = 0
# add natural deaths
ds[which(!is.na(ds$dod_ym)), "dead"] = 1
#check for multiple events!!!
ds$event = 0
ds[which(!is.na(ds$Incident.Event)), "event"] = 1
# year and month of event
ds$yoe = as.numeric(substring(ds$Event_Date.Event, 1, 4))
ds$moe = as.numeric(substring(ds$Event_Date.Event, 5, 6))
# year and month of death
ds$yod = as.numeric(substring(ds$dod_ym, 1, 4))
ds$mod = as.numeric(substring(ds$dod_ym, 5, 6))
ds$censor_y = ifelse(ds$event == 1, ds$yoe, ifelse(ds$dead == 1, ds$yod, 2021))
ds$censor_m = ifelse(ds$event == 1, ds$moe, ifelse(ds$dead == 1, ds$mod, 9))
#censoring
ds$yr_diff = ifelse(ds$event==0, ds$censor_y - ds$yob, ds$yoe - ds$yob)
ds$m_diff = ifelse(ds$event==0, ((ds$censor_m - ds$mob)/12), ((ds$moe - ds$mob)/12))
ds$age_event = ds$yr_diff + ds$m_diff
ds$tte = ds$age_event - ds$age
ds$tte = ifelse(ds$tte < -1, NA, ds$tte)
ds$tte = ifelse(ds$tte < 0, 0, ds$tte)
return(ds)
}
outlierID <- function(x, cut=4) {
xx <- scale(x)
retval <- ifelse (abs(xx) >= cut, TRUE, FALSE)
retval
}
outlierTrim <- function(x, cut=4) {
id <- outlierID(x, cut=cut)
retval <- ifelse(id, NA, x)
}
option_list = list(
make_option(c("-s", "--settings"), type="character", default=NULL,
help="Settings file path (settings.json)", metavar="character")
);
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
url = '/Volumes/marioni-lab/Ola/Lab/EpiScores/Cox_episcores_composite/runs/final/cox_settings.json'
if (!is.null(opt$settings)) {
url = opt$settings
}
settings <- fromJSON(txt=url, flatten = FALSE)
settings
set.seed(42) # Set seed to ensure fold variation minimised
seed <- 42
agesex = read.csv(settings$prep.agesex);
agemonths = read.csv(settings$prep.agemonths);
cvd_deaths = read.csv(settings$prep.cvd_deaths);
non_cvd_deaths = read.csv(settings$prep.non_cvd_deaths);
hosp_events = read.csv(settings$prep.hosp_events);
assign =  read.csv(settings$prep.assign);
target = readRDS(settings$prep.target)
events = hosp_events
events = subset(events, Incident==1 & Event_Type != "GP" & Event_Type != "Death") # 1297
main_ds = assign %>%
left_join(agesex, c("id" = "id")) %>%
left_join(target, c("id" = "Sample_Name")) %>%
left_join(non_cvd_deaths, c("id" = "id")) %>%
left_join(cvd_deaths, c("id" = "id"))
ds = main_ds %>% left_join(events, c("id" = "id"))
ds = ds[c("id", "Sample_Sentrix_ID", "sex.x", "age.x", "assign", "Troponin_T", "Troponin_I", "cTnI_corrected", "Set", "yob", "mob", "dod_ym",
"Incident.x", "Event_Type.x", "Event_Date.x", "Incident.y", "Event_Type.y", "Event_Date.y")]
colnames(ds) = c("id", "Sentrix_ID", "sex", "age", "assign", "Troponin_T", "Troponin_I", "cTnI_corrected", "set", "yob", "mob", "dod_ym",
"Incident.Death", "Event_Type.Death", "Event_Date.Death", "Incident.Event", "Event_Type.Event", "Event_Date.Event")
cox = make_cox_dataset(ds) # 18413
# cox = cox[!(cox$dead == 1 & cox$event == 0), ] # remove those who died of non-cardio causes
# cox = cox[c("id", "Sentrix_ID", "sex", "age", "assign", "Troponin_T", "Troponin_I", "cTnI_corrected", "set", "dead", "event", "tte")]
cox = cox[c("id", "Sentrix_ID", "sex", "age", "assign", "set", "cTnI_corrected", "event", "tte")]
cox = subset(cox, !is.na(tte) & tte>0) #18359
cox = subset(cox, !is.na(assign)) # 16354
cox = subset(cox, cox$age>=30 & cox$age<70) # 12971 items
cox$assign = outlierTrim(cox$assign, 3)
cox = na.omit(cox) #12657
library(dplyr)
library(optparse)
library(jsonlite)
library(survival)
library(survminer)
transform <- function(x) {
transformed <- qnorm((rank(x,na.last="keep")-0.5)/sum(!is.na(x)))
return(transformed)
}
make_cox_dataset = function(ds) {
ds[which(is.na(ds$mob)), "mob"] = 1
# there is another file - targets file - where this has been corrected
ds$dead = 0
# add natural deaths
ds[which(!is.na(ds$dod_ym)), "dead"] = 1
#check for multiple events!!!
ds$event = 0
ds[which(!is.na(ds$Incident.Event)), "event"] = 1
# year and month of event
ds$yoe = as.numeric(substring(ds$Event_Date.Event, 1, 4))
ds$moe = as.numeric(substring(ds$Event_Date.Event, 5, 6))
# year and month of death
ds$yod = as.numeric(substring(ds$dod_ym, 1, 4))
ds$mod = as.numeric(substring(ds$dod_ym, 5, 6))
ds$censor_y = ifelse(ds$event == 1, ds$yoe, ifelse(ds$dead == 1, ds$yod, 2021))
ds$censor_m = ifelse(ds$event == 1, ds$moe, ifelse(ds$dead == 1, ds$mod, 9))
#censoring
ds$yr_diff = ifelse(ds$event==0, ds$censor_y - ds$yob, ds$yoe - ds$yob)
ds$m_diff = ifelse(ds$event==0, ((ds$censor_m - ds$mob)/12), ((ds$moe - ds$mob)/12))
ds$age_event = ds$yr_diff + ds$m_diff
ds$tte = ds$age_event - ds$age
ds$tte = ifelse(ds$tte < -1, NA, ds$tte)
ds$tte = ifelse(ds$tte < 0, 0, ds$tte)
return(ds)
}
outlierID <- function(x, cut=4) {
xx <- scale(x)
retval <- ifelse (abs(xx) >= cut, TRUE, FALSE)
retval
}
outlierTrim <- function(x, cut=4) {
id <- outlierID(x, cut=cut)
retval <- ifelse(id, NA, x)
}
option_list = list(
make_option(c("-s", "--settings"), type="character", default=NULL,
help="Settings file path (settings.json)", metavar="character")
);
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
url = '/Volumes/marioni-lab/Ola/Lab/EpiScores/Cox_episcores_composite/runs/final/cox_settings.json'
if (!is.null(opt$settings)) {
url = opt$settings
}
settings <- fromJSON(txt=url, flatten = FALSE)
settings
set.seed(42) # Set seed to ensure fold variation minimised
seed <- 42
agesex = read.csv(settings$prep.agesex);
agemonths = read.csv(settings$prep.agemonths);
cvd_deaths = read.csv(settings$prep.cvd_deaths);
non_cvd_deaths = read.csv(settings$prep.non_cvd_deaths);
hosp_events = read.csv(settings$prep.hosp_events);
assign =  read.csv('/Volumes/marioni-lab/Ola/Lab/ASSIGN/GS_assign_data_for_summary.csv');
target = readRDS(settings$prep.target)
events = hosp_events
events = subset(events, Incident==1 & Event_Type != "GP" & Event_Type != "Death") # 2265
main_ds = assign %>%
left_join(agesex, c("id" = "id")) %>%
left_join(target, c("id" = "Sample_Name")) %>%
left_join(non_cvd_deaths, c("id" = "id")) %>%
left_join(cvd_deaths, c("id" = "id"))
ds = main_ds %>% left_join(events, c("id" = "id"))
ds = ds[c("id", "Sample_Sentrix_ID", "sex.x", "age.x", "assign", "Troponin_T", "Troponin_I", "cTnI_corrected", "Set", "yob", "mob", "dod_ym",
"Incident.x", "Event_Type.x", "Event_Date.x", "Incident.y", "Event_Type.y", "Event_Date.y", "simd", "history_cvd", "diabetic", "ra",
"cigs_day_raw", "sys_bp", "total_cholesterol", "HDL_cholesterol")]
colnames(ds) = c("id", "Sentrix_ID", "sex", "age", "assign", "Troponin_T", "Troponin_I", "cTnI_corrected", "set", "yob", "mob", "dod_ym",
"Incident.Death", "Event_Type.Death", "Event_Date.Death", "Incident.Event", "Event_Type.Event", "Event_Date.Event", "simd", "history_cvd", "diabetic", "ra",
"cigs_day_raw", "sys_bp", "total_cholesterol", "HDL_cholesterol")
cox = make_cox_dataset(ds)
cox$non_smoker = ifelse(cox$cigs_day_raw==0, 1, 0)
sum(cox$event) # 1831
# cox = cox[c("id", "Sentrix_ID", "sex", "age", "assign", "Troponin_T", "Troponin_I", "cTnI_corrected", "set", "dead", "event", "tte")]
# cox = cox[c("id", "Sentrix_ID", "sex", "age", "assign", "set", "event", "tte")]
cox = subset(cox, !is.na(tte) & tte>0)
sum(cox$event) # 1825
cox = subset(cox, !is.na(assign)) # 15664
cox = subset(cox, cox$age>=30 & cox$age<70) # 12971 items
cox$assign = outlierTrim(cox$assign, 3)
cox = subset(cox, !is.na(assign))
table(cox$event) # 1288
dupa = na.omit(cox)
View(cox)
dupa = cox[c("id", "Sentrix_ID", "sex", "age", "assign", "set", "cTnI_corrected", "event", "tte")]
table(dupa)
dupa = cox[c("id", "Sentrix_ID", "sex", "age", "assign", "set", "cTnI_corrected", "event", "tte")]
table(dupa$event)
dupa = na.omit(dupa)
####################################### By wave #######################################
only_assign_vars = cox[c("id", "Sentrix_ID", "sex", "age", "simd", "history_cvd", "diabetic",
"cigs_day_raw", "non_smoker", "sys_bp", "ra", "total_cholesterol","HDL_cholesterol",
"assign", "set", "event", "tte", "Troponin_I", "cTnI_corrected")]
dim(na.omit(only_assign_vars))
####################################### By wave #######################################
only_assign_vars = cox[c("id", "Sentrix_ID", "sex", "age", "simd", "history_cvd", "diabetic",
"cigs_day_raw", "non_smoker", "sys_bp", "ra", "total_cholesterol","HDL_cholesterol",
"assign", "set", "event", "tte", "Troponin_I", "cTnI_corrected")]
only_assign_vars = na.omit(only_assign_vars)
cox = make_cox_dataset(ds)
cox$non_smoker = ifelse(cox$cigs_day_raw==0, 1, 0)
sum(cox$event) # 1831
# cox = cox[c("id", "Sentrix_ID", "sex", "age", "assign", "Troponin_T", "Troponin_I", "cTnI_corrected", "set", "dead", "event", "tte")]
# cox = cox[c("id", "Sentrix_ID", "sex", "age", "assign", "set", "event", "tte")]
cox = subset(cox, !is.na(tte) & tte>0)
sum(cox$event) # 1825
cox = subset(cox, !is.na(assign)) # 15664
sum(cox$event) # 1624, 16354
cox = subset(cox, cox$age>=30 & cox$age<70) # 12971 items
cox$assign = outlierTrim(cox$assign, 3)
cox = subset(cox, !is.na(assign))
table(cox$event) # 1288
####################################### By wave #######################################
only_assign_vars = cox[c("id", "Sentrix_ID", "sex", "age", "simd", "history_cvd", "diabetic",
"cigs_day_raw", "non_smoker", "sys_bp", "ra", "total_cholesterol","HDL_cholesterol",
"assign", "set", "event", "tte", "Troponin_I", "cTnI_corrected")]
only_assign_vars = na.omit(only_assign_vars)
table(only_assign_vars$event) # 1288
11383+1274
w1 = subset(only_assign_vars, set=="wave1")
w3_w4 = subset(only_assign_vars, set!="wave1") #9079
dim(w1)
w3 = subset(only_assign_vars, set=="wave3")
w4 = subset(only_assign_vars, set=="wave4")
unrelated = read.csv(settings$prep.unique_W3_W4)
w3_w4 = w3_w4[which(w3_w4$id %in% unrelated$Sample_Name),] #6936
table(is.na(w1))
table(is.na(w3_w4))
dim(w1)
dim(w3_w4)
threshold_events = function(x, threshold = 10) {
x$event <- sapply(1:nrow(x), function(i) {
if (x$tte[[i]] > threshold) {
0
} else {
x$event[[i]]
}
})
return(x)
}
w1 = threshold_events(w1, 10)
table(w1$event)
full_cases = subset(only_assign_vars, event == 1)
full_controls = subset(only_assign_vars, event == 0)
training_cases = subset(w3_w4, event == 1)
training_controls = subset(w3_w4, event == 0)
test_cases = subset(w1, event == 1)
test_controls = subset(w1, event == 0)
continous_normal_stats = function(variable, set) {
# variable = "sys_bp"
# set = my_data
mean = mean(set[,variable])
sd = sd(set[,variable])
ret = c(mean, sd)
return(ret)
}
continous_non_normal_stats = function(variable, set) {
# variable = "age"
# set = my_data
median = median(set[,variable])
q1 = quantile(set[,variable], 0.25)
q3 = quantile(set[,variable], 0.75)
ret = c(median, q1, q3)
return(ret)
}
categorical_stats = function(variable, response, set) {
# variable = "diabetic"
# response = 1
# set = my_data
condition = paste0(variable, "==", response)
tmp_set = subset(set, eval(parse(text=condition)))
n_set = nrow(set)
n_tmp_set = nrow(tmp_set)
prop = n_tmp_set * 100/n_set
ret = c(n_tmp_set, prop)
return(ret)
}
gather_set_statistics = function(set, set_name) {
tte = continous_non_normal_stats("tte", set)
age = continous_non_normal_stats("age", set)
sex = categorical_stats("sex", 1, set)
simd = continous_non_normal_stats("simd", set)
history = categorical_stats("history_cvd", 1, set)
diabetes = categorical_stats("diabetic", 1, set)
ra = categorical_stats("ra", 1, set)
non_smoker = categorical_stats("non_smoker", 1, set)
sys_bp = continous_normal_stats("sys_bp", set)
total_cholesterol = continous_normal_stats("total_cholesterol", set)
hdl = continous_non_normal_stats("HDL_cholesterol", set)
assign_score = continous_non_normal_stats("assign", set)
formatted_list = data.frame(
"set" = set_name,
"n" = nrow(set),
"tte" = sprintf("%.1f\r\n[%.1f, %.1f]", tte[1], tte[2], tte[3]),
"age" = sprintf("%.1f\r\n[%.1f, %.1f]", age[1], age[2], age[3]),
"sex"= sprintf("%.f\r\n(%.1f%%)", sex[1], sex[2]),
"simd" = sprintf("%.1f\r\n[%.1f, %.1f]", simd[1], simd[2], simd[3]),
"history_cvd" = sprintf("%.f\r\n(%.1f%%)", history[1], history[2]),
"diabetes" = sprintf("%.f\r\n(%.1f%%)", diabetes[1], diabetes[2]),
"ra" = sprintf("%.f\r\n(%.1f%%)", ra[1], ra[2]),
"non_smoker" = sprintf("%.f\r\n(%.1f%%)", non_smoker[1], non_smoker[2]),
"sys_bp" = sprintf("%.1f\r\n(%.1f)", sys_bp[1], sys_bp[2]),
"total_cholesterol" = sprintf("%.1f\r\n(%.1f)", total_cholesterol[1], total_cholesterol[2]),
"HDL_cholesterol" = sprintf("%.1f\r\n[%.1f, %.1f]", hdl[1], hdl[2], hdl[3]),
"ASSIGN" = sprintf("%.f\r\n[%.f, %.f]", assign_score[1], assign_score[2], assign_score[3])
)
return(formatted_list)
}
sets = list(training_cases = training_cases,
training_controls = training_controls,
test_cases = test_cases,
test_controls = test_controls,
full_cases = full_cases,
full_controls = full_controls)
statistics <- lapply(seq_along(sets), function(i) {gather_set_statistics(sets[[i]], names(sets)[[i]])})
statisticsAssign = t(bind_rows(statistics))
View(statisticsAssign)
write.csv(statisticsAssign, '/Volumes/marioni-lab/Ola/Lab/ASSIGN/summaryTable.csv', row.names = T)
source('~/Projects/R/general/toolbox/shiny/tutorial/Prep_survival_data.R', echo=TRUE)
View(col_names)
full_annots = readRDS("/Volumes/marioni-lab/Ola/Lab/EpiScores/Annotations/EpiAnnots_prepped.RDS")
View(full_annots)
View(full_annots)
naming2 = read.csv("/Volumes/marioni-lab/Ola/Lab/EpiScores/Annotations/SOMAscan_Assay_v4_Annotations_version3.3.2_Septin_Name_Correction_270121.csv")
naming = unique(naming)
naming2_short = naming2[, c("SeqId", "Target", "Gene.Name.Name")]
x = left_join(col_names, naming, by=c("protein" = "Predictor"))
View(x)
x = left_join(x, naming2_short, by=c("protein" = "SeqId"))
x$Prot_name = x$Gene.Name.Name
x[which(is.na(x$Prot_name)), "Prot_name"] = x[which(is.na(x$Prot_name)), "protein"]
View(x)
#naming solved
x = x[c("protein", "Prot_name")]
View(x)
View(full_annots)
x = left_join(col_names, full_annots, by=c("protein" = "ID"))
View(x)
View(col_names)
View(col_names)
colnames(episcores)
col_names = as.data.frame(colnames(episcores)[-1])
View(col_names)
colnames(col_names)[1] = "protein"
View(col_names)
x = left_join(col_names, full_annots, by=c("protein" = "ID"))
View(x)
View(x)
x = x[c("protein", "Gene")]
View(x)
x = subset(x, !duplicated(x$Gene))
View(x)
episcores = episcores[, which(colnames(episcores) %in% x$protein)]
identical(colnames(episcores),  x$protein)
colnames(episcores) = x$Gene
View(episcores)
merged = merge(cox, episcores, by.x="Sentrix_ID", by.y="ID")
View(episcores)
episcores = rbind(episcores_w1_w3, episcores_w4)
View(episcores)
rownames(episcores) = episcores$ID
View(episcores)
full_annots = readRDS("/Volumes/marioni-lab/Ola/Lab/EpiScores/Annotations/EpiAnnots_prepped.RDS")
col_names = as.data.frame(colnames(episcores)[-1])
colnames(col_names)[1] = "protein"
#naming solved
x = left_join(col_names, full_annots, by=c("protein" = "ID"))
x = x[c("protein", "Gene")]
x = subset(x, !duplicated(x$Gene))
episcores = episcores[, which(colnames(episcores) %in% x$protein)]
identical(colnames(episcores),  x$protein)
View(episcores)
episcores$ID = rownames(episcores)
colnames(episcores) = x$Gene
colnames(episcores)
episcores = episcores[, which(colnames(episcores) %in% x$protein)]
identical(colnames(episcores),  x$protein)
full_annots = readRDS("/Volumes/marioni-lab/Ola/Lab/EpiScores/Annotations/EpiAnnots_prepped.RDS")
col_names = as.data.frame(colnames(episcores)[-1])
colnames(col_names)[1] = "protein"
#naming solved
x = left_join(col_names, full_annots, by=c("protein" = "ID"))
x = x[c("protein", "Gene")]
x = subset(x, !duplicated(x$Gene))
episcores = episcores[, which(colnames(episcores) %in% x$protein)]
identical(colnames(episcores),  x$protein)
colnames(episcores) = x$Gene
episcores$ID = rownames(episcores)
ped = "/Volumes/marioni-lab/Ola/Source/cox/kinship_matrix_using_fixed_2022-01-28-pedigree.rds"
cox_path = '/Volumes/marioni-lab/Ola/Lab/Cox/basic_dataset_no_assumptions/cox_covars.csv'
episcores_w1_w3_path = '/Volumes/marioni-lab/Ola/Lab/EpiScores/Protein_projections/EpiScore_projections_GS_9537.csv'
episcores_w4_path = '/Volumes/marioni-lab/Ola/Lab/EpiScores/Protein_projections/EpiScore_projections_W4_8877_220221.csv'
kin_model = readRDS(ped)
cox = read.csv(cox_path) %>% select("Sentrix_ID", "age", "sex", "assign", "tte", "event")
episcores_w1_w3 = read.csv(episcores_w1_w3_path, check.names = FALSE)
episcores_w4 = read.csv(episcores_w4_path, check.names = FALSE)
names(episcores_w4)[1] = 'ID'
identical(colnames(episcores_w1_w3), colnames(episcores_w4))
episcores = rbind(episcores_w1_w3, episcores_w4)
rownames(episcores) = episcores$ID
full_annots = readRDS("/Volumes/marioni-lab/Ola/Lab/EpiScores/Annotations/EpiAnnots_prepped.RDS")
col_names = as.data.frame(colnames(episcores)[-1])
colnames(col_names)[1] = "protein"
#naming solved
x = left_join(col_names, full_annots, by=c("protein" = "ID"))
x = x[c("protein", "Gene")]
x = subset(x, !duplicated(x$Gene))
episcores = episcores[, which(colnames(episcores) %in% x$protein)]
identical(colnames(episcores),  x$protein)
colnames(episcores) = x$Gene
episcores$ID = rownames(episcores)
merged = merge(cox, episcores, by.x="Sentrix_ID", by.y="ID")
start = length(cox) + 1
end = ncol(merged)
path = '/Volumes/marioni-lab/Ola/Lab/Cox/basic_dataset_no_assumptions/'
write.csv(merged, paste0(path, "episcores_and_assign_input_data2.csv"), row.names = FALSE)
View(merged)
path = '/Volumes/marioni-lab/Ola/Lab/Cox/basic_dataset_no_assumptions/'
tb = read.csv(paste0(path, "episcores_and_assign_input_data2.csv"))
selected = data.frame("Sentrix_ID" = tb$Sentrix_ID,
"tte" = tb$tte,
"event" = tb$event)
idx = 91
colname = colnames(tb[idx])
col = tb[, idx]
top = quantile(col, probs = seq(.1, .9, by = .1))[8]
bottom = quantile(col, probs = seq(.1, .9, by = .1))[2]
selected[colname] = ifelse(tb[idx] > top, 2,
ifelse(tb[idx] < bottom, 0, NA))
dupa=selected
selected = na.omit(selected)
# 4337-49 - CRP
mod1 <- survfit(Surv(selected$tte, selected$event) ~ selected[, colname])
ggsurvplot(mod1,
data = selected,
conf.int=TRUE, # add confidence intervals
pval=TRUE, # show the p-value for the log-rank test
risk.table=FALSE, # show a risk table below the plot
legend.labs=c(paste("<", names(bottom)),
paste(">", names(top))), # change group labels
legend.title=paste(colname, "Quantile"),  # add legend title
palette=c("dodgerblue4", "red"), # change colors of the groups
ylab="CVD free survival",
xlab="Time (years)",
risk.table.height=.2)
runApp('~/Projects/R/general/projects/smoking/Shiny/CVD_and_EpiScores.R')
library(survival)
library(survminer)
library(dplyr)
library(kinship2)
library(coxme)
library(readxl)
library(tidyverse)
library(gdata)
outlierID <- function(x, cut=4) {
xx <- scale(x)
retval <- ifelse (abs(xx) >= cut, TRUE, FALSE)
retval
}
outlierTrim <- function(x, cut=4) {
id <- outlierID(x, cut=cut)
retval <- ifelse(id, NA, x)
}
extract_coxme_table <- function (mod){
beta <- mod$coefficients #$fixed is not needed
hr <-exp(beta)
nvar <- length(beta)
nfrail <- nrow(mod$var) - nvar
se <- sqrt(diag(mod$var)[nfrail + 1:nvar])
z<- round(beta/se, 2)
p<- signif(1 - pchisq((beta/se)^2, 1), 2)
lci = exp(beta-1*1.96*se)
uci = exp(beta+1*1.96*se)
table=data.frame(cbind(beta,hr,se,z,lci,uci,p))
return(table)
}
# Rank Inverse Based Normalisation of the data
transform <- function(x) {
transformed <- qnorm((rank(x,na.last="keep")-0.5)/sum(!is.na(x)))
return(transformed)
}
ped = "/Volumes/marioni-lab/Ola/Source/cox/kinship_matrix_using_fixed_2022-01-28-pedigree.rds"
kin_model = readRDS(ped)
cox = read.csv('/Volumes/marioni-lab/Ola/Lab/Cox/Full_Dataset.csv')
cox = subset(cox, !is.na(tte) & tte>0)
cox = subset(cox, !is.na(assign) & !is.na(ID)) # 15664
cox = subset(cox, cox$age>=30 & cox$age<70) # 12971 items
cox$assign = outlierTrim(cox$assign, 3)
cox = subset(cox, !is.na(assign)) #12790
mod_troponins = coxph(Surv(cox$tte, cox$event) ~
transform(cox$assign) +
as.numeric(transform(cox$cTnI)))
summary(mod_troponins)
cox.zph(mod_troponins)
mod_troponins = coxme(Surv(cox$tte, cox$event) ~
transform(cox$assign) +
as.numeric(log(cox$cTnI)) +
(1|cox$id), varlist = kin_model*2)
summary(mod_troponins)
mod_troponins = coxme(Surv(cox$tte, cox$event) ~
transform(cox$assign) +
as.numeric(transform(cox$cTnI_corrected)) +
(1|cox$id), varlist = kin_model*2)
summary(mod_troponins)
library(shiny); runApp('~/Projects/R/general/projects/smoking/Shiny/CVD_and_EpiScores.R')
